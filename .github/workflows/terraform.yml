name: Terraform Validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  # Run Super Linter to validate code quality and enforce style guidelines
  superlinter:
    name: Run Super Linter for Code Validation
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Lint Code
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: "main"
          DISABLE_ERRORS: false
          VALIDATE_TERRAFORM: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_MD: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Validate and lint Terraform configuration, ensuring proper syntax, code quality, and security best practices.
  terraform:
    name: Validate and Lint Terraform Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.2
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

      - name: Configure Kubernetes using KUBECONFIG
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 --decode > $HOME/.kube/microk8s-config

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform Configuration
        run: terraform validate

      - name: Execute TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.53.0

      - name: Perform Terraform Linting
        run: tflint --format=compact

      - name: Execute TFSEC
        uses: aquasecurity/tfsec-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ensure GITHUB_TOKEN is passed here for API requests

      # If your Kubernetes cluster is publicly accessible, you may uncomment the following steps
      # to integrate Terraform's `plan` and `apply` stages into your CI/CD pipeline.
      # The Terraform Plan step will run on pull requests to review the changes before merging.
      # The Terraform Apply step will automatically apply the changes when pushing to the `main` branch.
      # Ensure that your cluster's access permissions and security policies allow for remote management.

#        - name: Terraform Plan
#          run: terraform plan -no-color
#          if: github.event_name == 'pull_request'
#
#        - name: Terraform Apply
#          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#          run: terraform apply -auto-approve

  # TODO: Implement Slack notifications for failed builds to alert the team in the event of pipeline failures.

  # Notify Slack on failure
#  notify-slack:
#    if: failure()  # This job will run only if any of the above jobs fail
#    runs-on: ubuntu-latest
#    steps:
#      - name: Send Slack Notification
#        run: |
#          curl -X POST -H 'Content-type: application/json' --data "{
#            \"text\": \"*Pipeline Failure* - Terraform Validation failed for the repository ${GITHUB_REPOSITORY}.
#              \n\nDetails: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"
#          }" ${{ secrets.SLACK_WEBHOOK_URL }}